/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.5.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  Company,
  CompanyToJSON,
  Contact,
  ContactToJSON,
  CreateCompanyResponse,
  CreateCompanyResponseFromJSON,
  CreateContactResponse,
  CreateContactResponseFromJSON,
  CreateInvoiceItemResponse,
  CreateInvoiceItemResponseFromJSON,
  CreateInvoiceResponse,
  CreateInvoiceResponseFromJSON,
  CreateLedgerAccountResponse,
  CreateLedgerAccountResponseFromJSON,
  CreateTaxRateResponse,
  CreateTaxRateResponseFromJSON,
  DeleteCompanyResponse,
  DeleteCompanyResponseFromJSON,
  DeleteContactResponse,
  DeleteContactResponseFromJSON,
  DeleteInvoiceResponse,
  DeleteInvoiceResponseFromJSON,
  DeleteLedgerAccountResponse,
  DeleteLedgerAccountResponseFromJSON,
  DeleteTaxRateResponse,
  DeleteTaxRateResponseFromJSON,
  GetCompaniesResponse,
  GetCompaniesResponseFromJSON,
  GetCompanyResponse,
  GetCompanyResponseFromJSON,
  GetContactResponse,
  GetContactResponseFromJSON,
  GetContactsResponse,
  GetContactsResponseFromJSON,
  GetInvoiceItemResponse,
  GetInvoiceItemResponseFromJSON,
  GetInvoiceItemsResponse,
  GetInvoiceItemsResponseFromJSON,
  GetInvoiceResponse,
  GetInvoiceResponseFromJSON,
  GetInvoicesResponse,
  GetInvoicesResponseFromJSON,
  GetLedgerAccountResponse,
  GetLedgerAccountResponseFromJSON,
  GetLedgerAccountsResponse,
  GetLedgerAccountsResponseFromJSON,
  GetTaxRateResponse,
  GetTaxRateResponseFromJSON,
  GetTaxRatesResponse,
  GetTaxRatesResponseFromJSON,
  Invoice,
  InvoiceItem,
  InvoiceItemToJSON,
  InvoiceToJSON,
  LedgerAccount,
  LedgerAccountToJSON,
  TaxRate,
  TaxRateToJSON,
  UpdateCompanyResponse,
  UpdateCompanyResponseFromJSON,
  UpdateContactResponse,
  UpdateContactResponseFromJSON,
  UpdateInvoiceItemsResponse,
  UpdateInvoiceItemsResponseFromJSON,
  UpdateInvoiceResponse,
  UpdateInvoiceResponseFromJSON,
  UpdateLedgerAccountResponse,
  UpdateLedgerAccountResponseFromJSON,
  UpdateTaxRateResponse,
  UpdateTaxRateResponseFromJSON
} from '../models'
import * as runtime from '../runtime'

export interface AccountingApiCompaniesAddRequest {
  company: Company
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiCompaniesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiCompaniesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiCompaniesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiCompaniesUpdateRequest {
  id: string
  company: Company
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiContactsAddRequest {
  contact: Contact
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiContactsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiContactsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiContactsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiContactsUpdateRequest {
  id: string
  contact: Contact
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoiceItemsAddRequest {
  invoiceItem: InvoiceItem
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiInvoiceItemsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiInvoiceItemsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoiceItemsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoiceItemsUpdateRequest {
  id: string
  invoiceItem: InvoiceItem
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesAddRequest {
  invoice: Invoice
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiInvoicesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiInvoicesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesUpdateRequest {
  id: string
  invoice: Invoice
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiLedgerAccountsAddRequest {
  ledgerAccount: LedgerAccount
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiLedgerAccountsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiLedgerAccountsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiLedgerAccountsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiLedgerAccountsUpdateRequest {
  id: string
  ledgerAccount: LedgerAccount
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesAddRequest {
  taxRate: TaxRate
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiTaxRatesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiTaxRatesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesUpdateRequest {
  id: string
  taxRate: TaxRate
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

/**
 *
 */
export class AccountingApi extends runtime.BaseAPI {
  /**
   * Create Company
   * Create Company
   */
  async companiesAddRaw(
    requestParameters: AccountingApiCompaniesAddRequest
  ): Promise<runtime.ApiResponse<CreateCompanyResponse>> {
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Company
   * Create Company
   */
  async companiesAdd(
    requestParameters: AccountingApiCompaniesAddRequest
  ): Promise<CreateCompanyResponse> {
    const response = await this.companiesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Companies
   * List Companies
   */
  async companiesAllRaw(
    requestParameters: AccountingApiCompaniesAllRequest
  ): Promise<runtime.ApiResponse<GetCompaniesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetCompaniesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Companies
   * List Companies
   */
  async companiesAll(
    requestParameters: AccountingApiCompaniesAllRequest
  ): Promise<GetCompaniesResponse> {
    const response = await this.companiesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Company
   * Delete Company
   */
  async companiesDeleteRaw(
    requestParameters: AccountingApiCompaniesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Company
   * Delete Company
   */
  async companiesDelete(
    requestParameters: AccountingApiCompaniesDeleteRequest
  ): Promise<DeleteCompanyResponse> {
    const response = await this.companiesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Company
   * Get Company
   */
  async companiesOneRaw(
    requestParameters: AccountingApiCompaniesOneRequest
  ): Promise<runtime.ApiResponse<GetCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetCompanyResponseFromJSON(jsonValue))
  }

  /**
   * Get Company
   * Get Company
   */
  async companiesOne(
    requestParameters: AccountingApiCompaniesOneRequest
  ): Promise<GetCompanyResponse> {
    const response = await this.companiesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Company
   * Update Company
   */
  async companiesUpdateRaw(
    requestParameters: AccountingApiCompaniesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesUpdate.'
      )
    }

    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Company
   * Update Company
   */
  async companiesUpdate(
    requestParameters: AccountingApiCompaniesUpdateRequest
  ): Promise<UpdateCompanyResponse> {
    const response = await this.companiesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Contact
   * Create Contact
   */
  async contactsAddRaw(
    requestParameters: AccountingApiContactsAddRequest
  ): Promise<runtime.ApiResponse<CreateContactResponse>> {
    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new runtime.RequiredError(
        'contact',
        'Required parameter requestParameters.contact was null or undefined when calling contactsAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/contacts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Contact
   * Create Contact
   */
  async contactsAdd(
    requestParameters: AccountingApiContactsAddRequest
  ): Promise<CreateContactResponse> {
    const response = await this.contactsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Contacts
   * List Contacts
   */
  async contactsAllRaw(
    requestParameters: AccountingApiContactsAllRequest
  ): Promise<runtime.ApiResponse<GetContactsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/contacts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetContactsResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Contacts
   * List Contacts
   */
  async contactsAll(
    requestParameters: AccountingApiContactsAllRequest
  ): Promise<GetContactsResponse> {
    const response = await this.contactsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Contact
   * Delete Contact
   */
  async contactsDeleteRaw(
    requestParameters: AccountingApiContactsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Contact
   * Delete Contact
   */
  async contactsDelete(
    requestParameters: AccountingApiContactsDeleteRequest
  ): Promise<DeleteContactResponse> {
    const response = await this.contactsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Contact
   * Get Contact
   */
  async contactsOneRaw(
    requestParameters: AccountingApiContactsOneRequest
  ): Promise<runtime.ApiResponse<GetContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetContactResponseFromJSON(jsonValue))
  }

  /**
   * Get Contact
   * Get Contact
   */
  async contactsOne(
    requestParameters: AccountingApiContactsOneRequest
  ): Promise<GetContactResponse> {
    const response = await this.contactsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Contact
   * Update Contact
   */
  async contactsUpdateRaw(
    requestParameters: AccountingApiContactsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsUpdate.'
      )
    }

    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new runtime.RequiredError(
        'contact',
        'Required parameter requestParameters.contact was null or undefined when calling contactsUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Contact
   * Update Contact
   */
  async contactsUpdate(
    requestParameters: AccountingApiContactsUpdateRequest
  ): Promise<UpdateContactResponse> {
    const response = await this.contactsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Invoice Item
   * Create Invoice Item
   */
  async invoiceItemsAddRaw(
    requestParameters: AccountingApiInvoiceItemsAddRequest
  ): Promise<runtime.ApiResponse<CreateInvoiceItemResponse>> {
    if (requestParameters.invoiceItem === null || requestParameters.invoiceItem === undefined) {
      throw new runtime.RequiredError(
        'invoiceItem',
        'Required parameter requestParameters.invoiceItem was null or undefined when calling invoiceItemsAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceItemToJSON(requestParameters.invoiceItem)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateInvoiceItemResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Invoice Item
   * Create Invoice Item
   */
  async invoiceItemsAdd(
    requestParameters: AccountingApiInvoiceItemsAddRequest
  ): Promise<CreateInvoiceItemResponse> {
    const response = await this.invoiceItemsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Invoice Items
   * List Invoice Items
   */
  async invoiceItemsAllRaw(
    requestParameters: AccountingApiInvoiceItemsAllRequest
  ): Promise<runtime.ApiResponse<GetInvoiceItemsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetInvoiceItemsResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Invoice Items
   * List Invoice Items
   */
  async invoiceItemsAll(
    requestParameters: AccountingApiInvoiceItemsAllRequest
  ): Promise<GetInvoiceItemsResponse> {
    const response = await this.invoiceItemsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Invoice Item
   * Delete Invoice Item
   */
  async invoiceItemsDeleteRaw(
    requestParameters: AccountingApiInvoiceItemsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoiceItemsDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Invoice Item
   * Delete Invoice Item
   */
  async invoiceItemsDelete(
    requestParameters: AccountingApiInvoiceItemsDeleteRequest
  ): Promise<DeleteTaxRateResponse> {
    const response = await this.invoiceItemsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Invoice Item
   * Get Invoice Item
   */
  async invoiceItemsOneRaw(
    requestParameters: AccountingApiInvoiceItemsOneRequest
  ): Promise<runtime.ApiResponse<GetInvoiceItemResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoiceItemsOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetInvoiceItemResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get Invoice Item
   * Get Invoice Item
   */
  async invoiceItemsOne(
    requestParameters: AccountingApiInvoiceItemsOneRequest
  ): Promise<GetInvoiceItemResponse> {
    const response = await this.invoiceItemsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Invoice Item
   * Update Invoice Item
   */
  async invoiceItemsUpdateRaw(
    requestParameters: AccountingApiInvoiceItemsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateInvoiceItemsResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoiceItemsUpdate.'
      )
    }

    if (requestParameters.invoiceItem === null || requestParameters.invoiceItem === undefined) {
      throw new runtime.RequiredError(
        'invoiceItem',
        'Required parameter requestParameters.invoiceItem was null or undefined when calling invoiceItemsUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceItemToJSON(requestParameters.invoiceItem)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateInvoiceItemsResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Invoice Item
   * Update Invoice Item
   */
  async invoiceItemsUpdate(
    requestParameters: AccountingApiInvoiceItemsUpdateRequest
  ): Promise<UpdateInvoiceItemsResponse> {
    const response = await this.invoiceItemsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAddRaw(
    requestParameters: AccountingApiInvoicesAddRequest
  ): Promise<runtime.ApiResponse<CreateInvoiceResponse>> {
    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new runtime.RequiredError(
        'invoice',
        'Required parameter requestParameters.invoice was null or undefined when calling invoicesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAdd(
    requestParameters: AccountingApiInvoicesAddRequest
  ): Promise<CreateInvoiceResponse> {
    const response = await this.invoicesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAllRaw(
    requestParameters: AccountingApiInvoicesAllRequest
  ): Promise<runtime.ApiResponse<GetInvoicesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetInvoicesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAll(
    requestParameters: AccountingApiInvoicesAllRequest
  ): Promise<GetInvoicesResponse> {
    const response = await this.invoicesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDeleteRaw(
    requestParameters: AccountingApiInvoicesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDelete(
    requestParameters: AccountingApiInvoicesDeleteRequest
  ): Promise<DeleteInvoiceResponse> {
    const response = await this.invoicesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOneRaw(
    requestParameters: AccountingApiInvoicesOneRequest
  ): Promise<runtime.ApiResponse<GetInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetInvoiceResponseFromJSON(jsonValue))
  }

  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOne(
    requestParameters: AccountingApiInvoicesOneRequest
  ): Promise<GetInvoiceResponse> {
    const response = await this.invoicesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdateRaw(
    requestParameters: AccountingApiInvoicesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesUpdate.'
      )
    }

    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new runtime.RequiredError(
        'invoice',
        'Required parameter requestParameters.invoice was null or undefined when calling invoicesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdate(
    requestParameters: AccountingApiInvoicesUpdateRequest
  ): Promise<UpdateInvoiceResponse> {
    const response = await this.invoicesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Ledger Account
   * Create Ledger Account
   */
  async ledgerAccountsAddRaw(
    requestParameters: AccountingApiLedgerAccountsAddRequest
  ): Promise<runtime.ApiResponse<CreateLedgerAccountResponse>> {
    if (requestParameters.ledgerAccount === null || requestParameters.ledgerAccount === undefined) {
      throw new runtime.RequiredError(
        'ledgerAccount',
        'Required parameter requestParameters.ledgerAccount was null or undefined when calling ledgerAccountsAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LedgerAccountToJSON(requestParameters.ledgerAccount)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateLedgerAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Ledger Account
   * Create Ledger Account
   */
  async ledgerAccountsAdd(
    requestParameters: AccountingApiLedgerAccountsAddRequest
  ): Promise<CreateLedgerAccountResponse> {
    const response = await this.ledgerAccountsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Ledger Accounts
   * List Ledger Accounts
   */
  async ledgerAccountsAllRaw(
    requestParameters: AccountingApiLedgerAccountsAllRequest
  ): Promise<runtime.ApiResponse<GetLedgerAccountsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetLedgerAccountsResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Ledger Accounts
   * List Ledger Accounts
   */
  async ledgerAccountsAll(
    requestParameters: AccountingApiLedgerAccountsAllRequest
  ): Promise<GetLedgerAccountsResponse> {
    const response = await this.ledgerAccountsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Ledger Account
   * Delete Ledger Account
   */
  async ledgerAccountsDeleteRaw(
    requestParameters: AccountingApiLedgerAccountsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteLedgerAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteLedgerAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Ledger Account
   * Delete Ledger Account
   */
  async ledgerAccountsDelete(
    requestParameters: AccountingApiLedgerAccountsDeleteRequest
  ): Promise<DeleteLedgerAccountResponse> {
    const response = await this.ledgerAccountsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Ledger Account
   * Get Ledger Account
   */
  async ledgerAccountsOneRaw(
    requestParameters: AccountingApiLedgerAccountsOneRequest
  ): Promise<runtime.ApiResponse<GetLedgerAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetLedgerAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get Ledger Account
   * Get Ledger Account
   */
  async ledgerAccountsOne(
    requestParameters: AccountingApiLedgerAccountsOneRequest
  ): Promise<GetLedgerAccountResponse> {
    const response = await this.ledgerAccountsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Ledger Account
   * Update Ledger Account
   */
  async ledgerAccountsUpdateRaw(
    requestParameters: AccountingApiLedgerAccountsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateLedgerAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsUpdate.'
      )
    }

    if (requestParameters.ledgerAccount === null || requestParameters.ledgerAccount === undefined) {
      throw new runtime.RequiredError(
        'ledgerAccount',
        'Required parameter requestParameters.ledgerAccount was null or undefined when calling ledgerAccountsUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LedgerAccountToJSON(requestParameters.ledgerAccount)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateLedgerAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Ledger Account
   * Update Ledger Account
   */
  async ledgerAccountsUpdate(
    requestParameters: AccountingApiLedgerAccountsUpdateRequest
  ): Promise<UpdateLedgerAccountResponse> {
    const response = await this.ledgerAccountsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAddRaw(
    requestParameters: AccountingApiTaxRatesAddRequest
  ): Promise<runtime.ApiResponse<CreateTaxRateResponse>> {
    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new runtime.RequiredError(
        'taxRate',
        'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAdd(
    requestParameters: AccountingApiTaxRatesAddRequest
  ): Promise<CreateTaxRateResponse> {
    const response = await this.taxRatesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Tax Rates
   * List Tax Rates
   */
  async taxRatesAllRaw(
    requestParameters: AccountingApiTaxRatesAllRequest
  ): Promise<runtime.ApiResponse<GetTaxRatesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetTaxRatesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Tax Rates
   * List Tax Rates
   */
  async taxRatesAll(
    requestParameters: AccountingApiTaxRatesAllRequest
  ): Promise<GetTaxRatesResponse> {
    const response = await this.taxRatesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDeleteRaw(
    requestParameters: AccountingApiTaxRatesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDelete(
    requestParameters: AccountingApiTaxRatesDeleteRequest
  ): Promise<DeleteTaxRateResponse> {
    const response = await this.taxRatesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Tax Rate
   * Get Tax Rate
   */
  async taxRatesOneRaw(
    requestParameters: AccountingApiTaxRatesOneRequest
  ): Promise<runtime.ApiResponse<GetTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetTaxRateResponseFromJSON(jsonValue))
  }

  /**
   * Get Tax Rate
   * Get Tax Rate
   */
  async taxRatesOne(
    requestParameters: AccountingApiTaxRatesOneRequest
  ): Promise<GetTaxRateResponse> {
    const response = await this.taxRatesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdateRaw(
    requestParameters: AccountingApiTaxRatesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesUpdate.'
      )
    }

    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new runtime.RequiredError(
        'taxRate',
        'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdate(
    requestParameters: AccountingApiTaxRatesUpdateRequest
  ): Promise<UpdateTaxRateResponse> {
    const response = await this.taxRatesUpdateRaw(requestParameters)
    return await response.value()
  }
}
