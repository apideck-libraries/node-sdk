/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  Account,
  AccountToJSON,
  Company,
  CompanyToJSON,
  CreateAccountResponse,
  CreateAccountResponseFromJSON,
  CreateCompanyResponse1,
  CreateCompanyResponse1FromJSON,
  CreateInvoiceResponse,
  CreateInvoiceResponseFromJSON,
  CreateTaxRateResponse,
  CreateTaxRateResponseFromJSON,
  DeleteAccountResponse,
  DeleteAccountResponseFromJSON,
  DeleteCompanyResponse1,
  DeleteCompanyResponse1FromJSON,
  DeleteInvoiceResponse,
  DeleteInvoiceResponseFromJSON,
  DeleteTaxRateResponse,
  DeleteTaxRateResponseFromJSON,
  GetAccountResponse,
  GetAccountResponseFromJSON,
  GetAccountsResponse,
  GetAccountsResponseFromJSON,
  GetCompaniesResponse1,
  GetCompaniesResponse1FromJSON,
  GetCompanyResponse1,
  GetCompanyResponse1FromJSON,
  GetInvoiceResponse,
  GetInvoiceResponseFromJSON,
  GetInvoicesResponse,
  GetInvoicesResponseFromJSON,
  GetTaxRateResponse,
  GetTaxRateResponseFromJSON,
  GetTaxRatesResponse,
  GetTaxRatesResponseFromJSON,
  Invoice,
  InvoiceToJSON,
  TaxRate,
  TaxRateToJSON,
  UpdateAccountResponse,
  UpdateAccountResponseFromJSON,
  UpdateCompanyResponse1,
  UpdateCompanyResponse1FromJSON,
  UpdateInvoiceResponse,
  UpdateInvoiceResponseFromJSON,
  UpdateTaxRateResponse,
  UpdateTaxRateResponseFromJSON
} from '../models'
import * as runtime from '../runtime'

export interface AccountingApiAccountsAddRequest {
  account: Account
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiAccountsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiAccountsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiAccountsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiAccountsUpdateRequest {
  id: string
  account: Account
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiCompaniesAddRequest {
  company: Company
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiCompaniesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiCompaniesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiCompaniesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiCompaniesUpdateRequest {
  id: string
  company: Company
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesAddRequest {
  invoice: Invoice
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiInvoicesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiInvoicesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiInvoicesUpdateRequest {
  id: string
  invoice: Invoice
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesAddRequest {
  taxRate: TaxRate
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface AccountingApiTaxRatesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface AccountingApiTaxRatesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface AccountingApiTaxRatesUpdateRequest {
  id: string
  taxRate: TaxRate
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

/**
 *
 */
export class AccountingApi extends runtime.BaseAPI {
  /**
   * Create account
   * Create account
   */
  async accountsAddRaw(
    requestParameters: AccountingApiAccountsAddRequest
  ): Promise<runtime.ApiResponse<CreateAccountResponse>> {
    if (requestParameters.account === null || requestParameters.account === undefined) {
      throw new runtime.RequiredError(
        'account',
        'Required parameter requestParameters.account was null or undefined when calling accountsAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/accounts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: AccountToJSON(requestParameters.account)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create account
   * Create account
   */
  async accountsAdd(
    requestParameters: AccountingApiAccountsAddRequest
  ): Promise<CreateAccountResponse> {
    const response = await this.accountsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List accounts
   * List accounts
   */
  async accountsAllRaw(
    requestParameters: AccountingApiAccountsAllRequest
  ): Promise<runtime.ApiResponse<GetAccountsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/accounts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetAccountsResponseFromJSON(jsonValue)
    )
  }

  /**
   * List accounts
   * List accounts
   */
  async accountsAll(
    requestParameters: AccountingApiAccountsAllRequest
  ): Promise<GetAccountsResponse> {
    const response = await this.accountsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete account
   * Delete account
   */
  async accountsDeleteRaw(
    requestParameters: AccountingApiAccountsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling accountsDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete account
   * Delete account
   */
  async accountsDelete(
    requestParameters: AccountingApiAccountsDeleteRequest
  ): Promise<DeleteAccountResponse> {
    const response = await this.accountsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get account
   * Get account
   */
  async accountsOneRaw(
    requestParameters: AccountingApiAccountsOneRequest
  ): Promise<runtime.ApiResponse<GetAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling accountsOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetAccountResponseFromJSON(jsonValue))
  }

  /**
   * Get account
   * Get account
   */
  async accountsOne(
    requestParameters: AccountingApiAccountsOneRequest
  ): Promise<GetAccountResponse> {
    const response = await this.accountsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update account
   * Update account
   */
  async accountsUpdateRaw(
    requestParameters: AccountingApiAccountsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateAccountResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling accountsUpdate.'
      )
    }

    if (requestParameters.account === null || requestParameters.account === undefined) {
      throw new runtime.RequiredError(
        'account',
        'Required parameter requestParameters.account was null or undefined when calling accountsUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/accounts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: AccountToJSON(requestParameters.account)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateAccountResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update account
   * Update account
   */
  async accountsUpdate(
    requestParameters: AccountingApiAccountsUpdateRequest
  ): Promise<UpdateAccountResponse> {
    const response = await this.accountsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Company
   * Create Company
   */
  async companiesAddRaw(
    requestParameters: AccountingApiCompaniesAddRequest
  ): Promise<runtime.ApiResponse<CreateCompanyResponse1>> {
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesAdd1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateCompanyResponse1FromJSON(jsonValue)
    )
  }

  /**
   * Create Company
   * Create Company
   */
  async companiesAdd(
    requestParameters: AccountingApiCompaniesAddRequest
  ): Promise<CreateCompanyResponse1> {
    const response = await this.companiesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Companies
   * List Companies
   */
  async companiesAllRaw(
    requestParameters: AccountingApiCompaniesAllRequest
  ): Promise<runtime.ApiResponse<GetCompaniesResponse1>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetCompaniesResponse1FromJSON(jsonValue)
    )
  }

  /**
   * List Companies
   * List Companies
   */
  async companiesAll(
    requestParameters: AccountingApiCompaniesAllRequest
  ): Promise<GetCompaniesResponse1> {
    const response = await this.companiesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Company
   * Delete Company
   */
  async companiesDeleteRaw(
    requestParameters: AccountingApiCompaniesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteCompanyResponse1>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesDelete1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteCompanyResponse1FromJSON(jsonValue)
    )
  }

  /**
   * Delete Company
   * Delete Company
   */
  async companiesDelete(
    requestParameters: AccountingApiCompaniesDeleteRequest
  ): Promise<DeleteCompanyResponse1> {
    const response = await this.companiesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Company
   * Get Company
   */
  async companiesOneRaw(
    requestParameters: AccountingApiCompaniesOneRequest
  ): Promise<runtime.ApiResponse<GetCompanyResponse1>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesOne1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetCompanyResponse1FromJSON(jsonValue)
    )
  }

  /**
   * Get Company
   * Get Company
   */
  async companiesOne(
    requestParameters: AccountingApiCompaniesOneRequest
  ): Promise<GetCompanyResponse1> {
    const response = await this.companiesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Company
   * Update Company
   */
  async companiesUpdateRaw(
    requestParameters: AccountingApiCompaniesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateCompanyResponse1>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesUpdate1.'
      )
    }

    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesUpdate1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateCompanyResponse1FromJSON(jsonValue)
    )
  }

  /**
   * Update Company
   * Update Company
   */
  async companiesUpdate(
    requestParameters: AccountingApiCompaniesUpdateRequest
  ): Promise<UpdateCompanyResponse1> {
    const response = await this.companiesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAddRaw(
    requestParameters: AccountingApiInvoicesAddRequest
  ): Promise<runtime.ApiResponse<CreateInvoiceResponse>> {
    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new runtime.RequiredError(
        'invoice',
        'Required parameter requestParameters.invoice was null or undefined when calling invoicesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAdd(
    requestParameters: AccountingApiInvoicesAddRequest
  ): Promise<CreateInvoiceResponse> {
    const response = await this.invoicesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAllRaw(
    requestParameters: AccountingApiInvoicesAllRequest
  ): Promise<runtime.ApiResponse<GetInvoicesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetInvoicesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAll(
    requestParameters: AccountingApiInvoicesAllRequest
  ): Promise<GetInvoicesResponse> {
    const response = await this.invoicesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDeleteRaw(
    requestParameters: AccountingApiInvoicesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDelete(
    requestParameters: AccountingApiInvoicesDeleteRequest
  ): Promise<DeleteInvoiceResponse> {
    const response = await this.invoicesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOneRaw(
    requestParameters: AccountingApiInvoicesOneRequest
  ): Promise<runtime.ApiResponse<GetInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetInvoiceResponseFromJSON(jsonValue))
  }

  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOne(
    requestParameters: AccountingApiInvoicesOneRequest
  ): Promise<GetInvoiceResponse> {
    const response = await this.invoicesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdateRaw(
    requestParameters: AccountingApiInvoicesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateInvoiceResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling invoicesUpdate.'
      )
    }

    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new runtime.RequiredError(
        'invoice',
        'Required parameter requestParameters.invoice was null or undefined when calling invoicesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateInvoiceResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdate(
    requestParameters: AccountingApiInvoicesUpdateRequest
  ): Promise<UpdateInvoiceResponse> {
    const response = await this.invoicesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAddRaw(
    requestParameters: AccountingApiTaxRatesAddRequest
  ): Promise<runtime.ApiResponse<CreateTaxRateResponse>> {
    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new runtime.RequiredError(
        'taxRate',
        'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAdd(
    requestParameters: AccountingApiTaxRatesAddRequest
  ): Promise<CreateTaxRateResponse> {
    const response = await this.taxRatesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List Tax Rates
   * List Tax Rates
   */
  async taxRatesAllRaw(
    requestParameters: AccountingApiTaxRatesAllRequest
  ): Promise<runtime.ApiResponse<GetTaxRatesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetTaxRatesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List Tax Rates
   * List Tax Rates
   */
  async taxRatesAll(
    requestParameters: AccountingApiTaxRatesAllRequest
  ): Promise<GetTaxRatesResponse> {
    const response = await this.taxRatesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDeleteRaw(
    requestParameters: AccountingApiTaxRatesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDelete(
    requestParameters: AccountingApiTaxRatesDeleteRequest
  ): Promise<DeleteTaxRateResponse> {
    const response = await this.taxRatesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get Tax Rate
   * Get Tax Rate
   */
  async taxRatesOneRaw(
    requestParameters: AccountingApiTaxRatesOneRequest
  ): Promise<runtime.ApiResponse<GetTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetTaxRateResponseFromJSON(jsonValue))
  }

  /**
   * Get Tax Rate
   * Get Tax Rate
   */
  async taxRatesOne(
    requestParameters: AccountingApiTaxRatesOneRequest
  ): Promise<GetTaxRateResponse> {
    const response = await this.taxRatesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdateRaw(
    requestParameters: AccountingApiTaxRatesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateTaxRateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling taxRatesUpdate.'
      )
    }

    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new runtime.RequiredError(
        'taxRate',
        'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateTaxRateResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdate(
    requestParameters: AccountingApiTaxRatesUpdateRequest
  ): Promise<UpdateTaxRateResponse> {
    const response = await this.taxRatesUpdateRaw(requestParameters)
    return await response.value()
  }
}
