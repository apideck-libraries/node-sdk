/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.8.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  CreateWebhookRequest,
  CreateWebhookRequestToJSON,
  CreateWebhookResponse,
  CreateWebhookResponseFromJSON,
  DeleteWebhookResponse,
  DeleteWebhookResponseFromJSON,
  GetWebhookResponse,
  GetWebhookResponseFromJSON,
  GetWebhooksResponse,
  GetWebhooksResponseFromJSON,
  UpdateWebhookRequest,
  UpdateWebhookRequestToJSON,
  UpdateWebhookResponse,
  UpdateWebhookResponseFromJSON
} from '../models'
import * as runtime from '../runtime'

export interface WebhookApiWebhooksAddRequest {
  webhook: CreateWebhookRequest
  raw?: boolean
  appId?: string
  serviceId?: string
}

export interface WebhookApiWebhooksAllRequest {
  raw?: boolean
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface WebhookApiWebhooksDeleteRequest {
  id: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface WebhookApiWebhooksOneRequest {
  id: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface WebhookApiWebhooksUpdateRequest {
  id: string
  webhook: UpdateWebhookRequest
  appId?: string
  serviceId?: string
  raw?: boolean
}

/**
 *
 */
export class WebhookApi extends runtime.BaseAPI {
  /**
   * Create webhook
   * Create webhook
   */
  async webhooksAddRaw(
    requestParameters: WebhookApiWebhooksAddRequest
  ): Promise<runtime.ApiResponse<CreateWebhookResponse>> {
    if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
      throw new runtime.RequiredError(
        'webhook',
        'Required parameter requestParameters.webhook was null or undefined when calling webhooksAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateWebhookRequestToJSON(requestParameters.webhook)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateWebhookResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create webhook
   * Create webhook
   */
  async webhooksAdd(
    requestParameters: WebhookApiWebhooksAddRequest
  ): Promise<CreateWebhookResponse> {
    const response = await this.webhooksAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List webhooks
   * List webhooks
   */
  async webhooksAllRaw(
    requestParameters: WebhookApiWebhooksAllRequest
  ): Promise<runtime.ApiResponse<GetWebhooksResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetWebhooksResponseFromJSON(jsonValue)
    )
  }

  /**
   * List webhooks
   * List webhooks
   */
  async webhooksAll(requestParameters: WebhookApiWebhooksAllRequest): Promise<GetWebhooksResponse> {
    const response = await this.webhooksAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete webhook
   * Delete webhook
   */
  async webhooksDeleteRaw(
    requestParameters: WebhookApiWebhooksDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteWebhookResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling webhooksDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteWebhookResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete webhook
   * Delete webhook
   */
  async webhooksDelete(
    requestParameters: WebhookApiWebhooksDeleteRequest
  ): Promise<DeleteWebhookResponse> {
    const response = await this.webhooksDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get webhook
   * Get webhook
   */
  async webhooksOneRaw(
    requestParameters: WebhookApiWebhooksOneRequest
  ): Promise<runtime.ApiResponse<GetWebhookResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling webhooksOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetWebhookResponseFromJSON(jsonValue))
  }

  /**
   * Get webhook
   * Get webhook
   */
  async webhooksOne(requestParameters: WebhookApiWebhooksOneRequest): Promise<GetWebhookResponse> {
    const response = await this.webhooksOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update webhook
   * Update webhook
   */
  async webhooksUpdateRaw(
    requestParameters: WebhookApiWebhooksUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateWebhookResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling webhooksUpdate.'
      )
    }

    if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
      throw new runtime.RequiredError(
        'webhook',
        'Required parameter requestParameters.webhook was null or undefined when calling webhooksUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateWebhookRequestToJSON(requestParameters.webhook)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateWebhookResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update webhook
   * Update webhook
   */
  async webhooksUpdate(
    requestParameters: WebhookApiWebhooksUpdateRequest
  ): Promise<UpdateWebhookResponse> {
    const response = await this.webhooksUpdateRaw(requestParameters)
    return await response.value()
  }
}
