/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  Activity,
  ActivityToJSON,
  CompaniesFilter,
  CompaniesSort,
  Company,
  CompanyToJSON,
  Contact,
  ContactsFilter,
  ContactsSort,
  ContactToJSON,
  CreateActivityResponse,
  CreateActivityResponseFromJSON,
  CreateCompanyResponse,
  CreateCompanyResponseFromJSON,
  CreateContactResponse,
  CreateContactResponseFromJSON,
  CreateLeadResponse,
  CreateLeadResponseFromJSON,
  CreateNoteResponse,
  CreateNoteResponseFromJSON,
  CreateOpportunityResponse,
  CreateOpportunityResponseFromJSON,
  CreatePipelineResponse,
  CreatePipelineResponseFromJSON,
  CreateUserResponse,
  CreateUserResponseFromJSON,
  DeleteActivityResponse,
  DeleteActivityResponseFromJSON,
  DeleteCompanyResponse,
  DeleteCompanyResponseFromJSON,
  DeleteContactResponse,
  DeleteContactResponseFromJSON,
  DeleteLeadResponse,
  DeleteLeadResponseFromJSON,
  DeleteNoteResponse,
  DeleteNoteResponseFromJSON,
  DeleteOpportunityResponse,
  DeleteOpportunityResponseFromJSON,
  DeletePipelineResponse,
  DeletePipelineResponseFromJSON,
  DeleteUserResponse,
  DeleteUserResponseFromJSON,
  GetActivitiesResponse,
  GetActivitiesResponseFromJSON,
  GetActivityResponse,
  GetActivityResponseFromJSON,
  GetCompaniesResponse,
  GetCompaniesResponseFromJSON,
  GetCompanyResponse,
  GetCompanyResponseFromJSON,
  GetContactResponse,
  GetContactResponseFromJSON,
  GetContactsResponse,
  GetContactsResponseFromJSON,
  GetLeadResponse,
  GetLeadResponseFromJSON,
  GetLeadsResponse,
  GetLeadsResponseFromJSON,
  GetNoteResponse,
  GetNoteResponseFromJSON,
  GetNotesResponse,
  GetNotesResponseFromJSON,
  GetOpportunitiesResponse,
  GetOpportunitiesResponseFromJSON,
  GetOpportunityResponse,
  GetOpportunityResponseFromJSON,
  GetPipelineResponse,
  GetPipelineResponseFromJSON,
  GetPipelinesResponse,
  GetPipelinesResponseFromJSON,
  GetUserResponse,
  GetUserResponseFromJSON,
  GetUsersResponse,
  GetUsersResponseFromJSON,
  Lead,
  LeadsFilter,
  LeadsSort,
  LeadToJSON,
  Note,
  NoteToJSON,
  OpportunitiesFilter,
  OpportunitiesSort,
  Opportunity,
  OpportunityToJSON,
  Pipeline,
  PipelineToJSON,
  UpdateActivityResponse,
  UpdateActivityResponseFromJSON,
  UpdateCompanyResponse,
  UpdateCompanyResponseFromJSON,
  UpdateContactResponse,
  UpdateContactResponseFromJSON,
  UpdateLeadResponse,
  UpdateLeadResponseFromJSON,
  UpdateNoteResponse,
  UpdateNoteResponseFromJSON,
  UpdateOpportunityResponse,
  UpdateOpportunityResponseFromJSON,
  UpdatePipelineResponse,
  UpdatePipelineResponseFromJSON,
  UpdateUserResponse,
  UpdateUserResponseFromJSON,
  User,
  UserToJSON
} from '../models'
import * as runtime from '../runtime'

export interface CrmApiActivitiesAddRequest {
  activity: Activity
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiActivitiesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface CrmApiActivitiesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiActivitiesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiActivitiesUpdateRequest {
  id: string
  activity: Activity
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiCompaniesAddRequest {
  company: Company
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiCompaniesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
  filter?: CompaniesFilter
  sort?: CompaniesSort
}

export interface CrmApiCompaniesDeleteRequest {
  id: string
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiCompaniesOneRequest {
  id: string
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiCompaniesUpdateRequest {
  id: string
  company: Company
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiContactsAddRequest {
  contact: Contact
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiContactsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
  filter?: ContactsFilter
  sort?: ContactsSort
}

export interface CrmApiContactsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiContactsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiContactsUpdateRequest {
  id: string
  contact: Contact
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiLeadsAddRequest {
  lead: Lead
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiLeadsAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
  filter?: LeadsFilter
  sort?: LeadsSort
}

export interface CrmApiLeadsDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiLeadsOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiLeadsUpdateRequest {
  id: string
  lead: Lead
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiNotesAddRequest {
  note: Note
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiNotesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface CrmApiNotesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiNotesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiNotesUpdateRequest {
  id: string
  note: Note
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiOpportunitiesAddRequest {
  opportunity: Opportunity
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiOpportunitiesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
  filter?: OpportunitiesFilter
  sort?: OpportunitiesSort
}

export interface CrmApiOpportunitiesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiOpportunitiesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiOpportunitiesUpdateRequest {
  id: string
  opportunity: Opportunity
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiPipelinesAddRequest {
  pipeline: Pipeline
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiPipelinesAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiPipelinesDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiPipelinesOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiPipelinesUpdateRequest {
  id: string
  pipeline: Pipeline
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiUsersAddRequest {
  user: User
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
}

export interface CrmApiUsersAllRequest {
  raw?: boolean
  consumerId?: string
  appId?: string
  serviceId?: string
  cursor?: string | null
  limit?: number
}

export interface CrmApiUsersDeleteRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiUsersOneRequest {
  id: string
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

export interface CrmApiUsersUpdateRequest {
  id: string
  user: User
  consumerId?: string
  appId?: string
  serviceId?: string
  raw?: boolean
}

/**
 *
 */
export class CrmApi extends runtime.BaseAPI {
  /**
   * Create activity
   * Create activity
   */
  async activitiesAddRaw(
    requestParameters: CrmApiActivitiesAddRequest
  ): Promise<runtime.ApiResponse<CreateActivityResponse>> {
    if (requestParameters.activity === null || requestParameters.activity === undefined) {
      throw new runtime.RequiredError(
        'activity',
        'Required parameter requestParameters.activity was null or undefined when calling activitiesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ActivityToJSON(requestParameters.activity)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateActivityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create activity
   * Create activity
   */
  async activitiesAdd(
    requestParameters: CrmApiActivitiesAddRequest
  ): Promise<CreateActivityResponse> {
    const response = await this.activitiesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List activities
   * List activities
   */
  async activitiesAllRaw(
    requestParameters: CrmApiActivitiesAllRequest
  ): Promise<runtime.ApiResponse<GetActivitiesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetActivitiesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List activities
   * List activities
   */
  async activitiesAll(
    requestParameters: CrmApiActivitiesAllRequest
  ): Promise<GetActivitiesResponse> {
    const response = await this.activitiesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete activity
   * Delete activity
   */
  async activitiesDeleteRaw(
    requestParameters: CrmApiActivitiesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteActivityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling activitiesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteActivityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete activity
   * Delete activity
   */
  async activitiesDelete(
    requestParameters: CrmApiActivitiesDeleteRequest
  ): Promise<DeleteActivityResponse> {
    const response = await this.activitiesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get activity
   * Get activity
   */
  async activitiesOneRaw(
    requestParameters: CrmApiActivitiesOneRequest
  ): Promise<runtime.ApiResponse<GetActivityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling activitiesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetActivityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get activity
   * Get activity
   */
  async activitiesOne(requestParameters: CrmApiActivitiesOneRequest): Promise<GetActivityResponse> {
    const response = await this.activitiesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update activity
   * Update activity
   */
  async activitiesUpdateRaw(
    requestParameters: CrmApiActivitiesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateActivityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling activitiesUpdate.'
      )
    }

    if (requestParameters.activity === null || requestParameters.activity === undefined) {
      throw new runtime.RequiredError(
        'activity',
        'Required parameter requestParameters.activity was null or undefined when calling activitiesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ActivityToJSON(requestParameters.activity)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateActivityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update activity
   * Update activity
   */
  async activitiesUpdate(
    requestParameters: CrmApiActivitiesUpdateRequest
  ): Promise<UpdateActivityResponse> {
    const response = await this.activitiesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create company
   * Create company
   */
  async companiesAddRaw(
    requestParameters: CrmApiCompaniesAddRequest
  ): Promise<runtime.ApiResponse<CreateCompanyResponse>> {
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create company
   * Create company
   */
  async companiesAdd(requestParameters: CrmApiCompaniesAddRequest): Promise<CreateCompanyResponse> {
    const response = await this.companiesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List companies
   * List companies
   */
  async companiesAllRaw(
    requestParameters: CrmApiCompaniesAllRequest
  ): Promise<runtime.ApiResponse<GetCompaniesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetCompaniesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List companies
   * List companies
   */
  async companiesAll(requestParameters: CrmApiCompaniesAllRequest): Promise<GetCompaniesResponse> {
    const response = await this.companiesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete company
   * Delete company
   */
  async companiesDeleteRaw(
    requestParameters: CrmApiCompaniesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete company
   * Delete company
   */
  async companiesDelete(
    requestParameters: CrmApiCompaniesDeleteRequest
  ): Promise<DeleteCompanyResponse> {
    const response = await this.companiesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get company
   * Get company
   */
  async companiesOneRaw(
    requestParameters: CrmApiCompaniesOneRequest
  ): Promise<runtime.ApiResponse<GetCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetCompanyResponseFromJSON(jsonValue))
  }

  /**
   * Get company
   * Get company
   */
  async companiesOne(requestParameters: CrmApiCompaniesOneRequest): Promise<GetCompanyResponse> {
    const response = await this.companiesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update company
   * Update company
   */
  async companiesUpdateRaw(
    requestParameters: CrmApiCompaniesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateCompanyResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling companiesUpdate.'
      )
    }

    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new runtime.RequiredError(
        'company',
        'Required parameter requestParameters.company was null or undefined when calling companiesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateCompanyResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update company
   * Update company
   */
  async companiesUpdate(
    requestParameters: CrmApiCompaniesUpdateRequest
  ): Promise<UpdateCompanyResponse> {
    const response = await this.companiesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create contact
   * Create contact
   */
  async contactsAddRaw(
    requestParameters: CrmApiContactsAddRequest
  ): Promise<runtime.ApiResponse<CreateContactResponse>> {
    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new runtime.RequiredError(
        'contact',
        'Required parameter requestParameters.contact was null or undefined when calling contactsAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create contact
   * Create contact
   */
  async contactsAdd(requestParameters: CrmApiContactsAddRequest): Promise<CreateContactResponse> {
    const response = await this.contactsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List contacts
   * List contacts
   */
  async contactsAllRaw(
    requestParameters: CrmApiContactsAllRequest
  ): Promise<runtime.ApiResponse<GetContactsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetContactsResponseFromJSON(jsonValue)
    )
  }

  /**
   * List contacts
   * List contacts
   */
  async contactsAll(requestParameters: CrmApiContactsAllRequest): Promise<GetContactsResponse> {
    const response = await this.contactsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete contact
   * Delete contact
   */
  async contactsDeleteRaw(
    requestParameters: CrmApiContactsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete contact
   * Delete contact
   */
  async contactsDelete(
    requestParameters: CrmApiContactsDeleteRequest
  ): Promise<DeleteContactResponse> {
    const response = await this.contactsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get contact
   * Get contact
   */
  async contactsOneRaw(
    requestParameters: CrmApiContactsOneRequest
  ): Promise<runtime.ApiResponse<GetContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetContactResponseFromJSON(jsonValue))
  }

  /**
   * Get contact
   * Get contact
   */
  async contactsOne(requestParameters: CrmApiContactsOneRequest): Promise<GetContactResponse> {
    const response = await this.contactsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update contact
   * Update contact
   */
  async contactsUpdateRaw(
    requestParameters: CrmApiContactsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateContactResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling contactsUpdate.'
      )
    }

    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new runtime.RequiredError(
        'contact',
        'Required parameter requestParameters.contact was null or undefined when calling contactsUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateContactResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update contact
   * Update contact
   */
  async contactsUpdate(
    requestParameters: CrmApiContactsUpdateRequest
  ): Promise<UpdateContactResponse> {
    const response = await this.contactsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create lead
   * Create lead
   */
  async leadsAddRaw(
    requestParameters: CrmApiLeadsAddRequest
  ): Promise<runtime.ApiResponse<CreateLeadResponse>> {
    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new runtime.RequiredError(
        'lead',
        'Required parameter requestParameters.lead was null or undefined when calling leadsAdd1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    })

    return new runtime.JSONApiResponse(response, jsonValue => CreateLeadResponseFromJSON(jsonValue))
  }

  /**
   * Create lead
   * Create lead
   */
  async leadsAdd(requestParameters: CrmApiLeadsAddRequest): Promise<CreateLeadResponse> {
    const response = await this.leadsAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List leads
   * List leads
   */
  async leadsAllRaw(
    requestParameters: CrmApiLeadsAllRequest
  ): Promise<runtime.ApiResponse<GetLeadsResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetLeadsResponseFromJSON(jsonValue))
  }

  /**
   * List leads
   * List leads
   */
  async leadsAll(requestParameters: CrmApiLeadsAllRequest): Promise<GetLeadsResponse> {
    const response = await this.leadsAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete lead
   * Delete lead
   */
  async leadsDeleteRaw(
    requestParameters: CrmApiLeadsDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteLeadResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling leadsDelete1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => DeleteLeadResponseFromJSON(jsonValue))
  }

  /**
   * Delete lead
   * Delete lead
   */
  async leadsDelete(requestParameters: CrmApiLeadsDeleteRequest): Promise<DeleteLeadResponse> {
    const response = await this.leadsDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get lead
   * Get lead
   */
  async leadsOneRaw(
    requestParameters: CrmApiLeadsOneRequest
  ): Promise<runtime.ApiResponse<GetLeadResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling leadsOne1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetLeadResponseFromJSON(jsonValue))
  }

  /**
   * Get lead
   * Get lead
   */
  async leadsOne(requestParameters: CrmApiLeadsOneRequest): Promise<GetLeadResponse> {
    const response = await this.leadsOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update lead
   * Update lead
   */
  async leadsUpdateRaw(
    requestParameters: CrmApiLeadsUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateLeadResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling leadsUpdate1.'
      )
    }

    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new runtime.RequiredError(
        'lead',
        'Required parameter requestParameters.lead was null or undefined when calling leadsUpdate1.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    })

    return new runtime.JSONApiResponse(response, jsonValue => UpdateLeadResponseFromJSON(jsonValue))
  }

  /**
   * Update lead
   * Update lead
   */
  async leadsUpdate(requestParameters: CrmApiLeadsUpdateRequest): Promise<UpdateLeadResponse> {
    const response = await this.leadsUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create note
   * Create note
   */
  async notesAddRaw(
    requestParameters: CrmApiNotesAddRequest
  ): Promise<runtime.ApiResponse<CreateNoteResponse>> {
    if (requestParameters.note === null || requestParameters.note === undefined) {
      throw new runtime.RequiredError(
        'note',
        'Required parameter requestParameters.note was null or undefined when calling notesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: NoteToJSON(requestParameters.note)
    })

    return new runtime.JSONApiResponse(response, jsonValue => CreateNoteResponseFromJSON(jsonValue))
  }

  /**
   * Create note
   * Create note
   */
  async notesAdd(requestParameters: CrmApiNotesAddRequest): Promise<CreateNoteResponse> {
    const response = await this.notesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List notes
   * List notes
   */
  async notesAllRaw(
    requestParameters: CrmApiNotesAllRequest
  ): Promise<runtime.ApiResponse<GetNotesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetNotesResponseFromJSON(jsonValue))
  }

  /**
   * List notes
   * List notes
   */
  async notesAll(requestParameters: CrmApiNotesAllRequest): Promise<GetNotesResponse> {
    const response = await this.notesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete note
   * Delete note
   */
  async notesDeleteRaw(
    requestParameters: CrmApiNotesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteNoteResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling notesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => DeleteNoteResponseFromJSON(jsonValue))
  }

  /**
   * Delete note
   * Delete note
   */
  async notesDelete(requestParameters: CrmApiNotesDeleteRequest): Promise<DeleteNoteResponse> {
    const response = await this.notesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get note
   * Get note
   */
  async notesOneRaw(
    requestParameters: CrmApiNotesOneRequest
  ): Promise<runtime.ApiResponse<GetNoteResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling notesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetNoteResponseFromJSON(jsonValue))
  }

  /**
   * Get note
   * Get note
   */
  async notesOne(requestParameters: CrmApiNotesOneRequest): Promise<GetNoteResponse> {
    const response = await this.notesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update note
   * Update note
   */
  async notesUpdateRaw(
    requestParameters: CrmApiNotesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateNoteResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling notesUpdate.'
      )
    }

    if (requestParameters.note === null || requestParameters.note === undefined) {
      throw new runtime.RequiredError(
        'note',
        'Required parameter requestParameters.note was null or undefined when calling notesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: NoteToJSON(requestParameters.note)
    })

    return new runtime.JSONApiResponse(response, jsonValue => UpdateNoteResponseFromJSON(jsonValue))
  }

  /**
   * Update note
   * Update note
   */
  async notesUpdate(requestParameters: CrmApiNotesUpdateRequest): Promise<UpdateNoteResponse> {
    const response = await this.notesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create opportunity
   * Create opportunity
   */
  async opportunitiesAddRaw(
    requestParameters: CrmApiOpportunitiesAddRequest
  ): Promise<runtime.ApiResponse<CreateOpportunityResponse>> {
    if (requestParameters.opportunity === null || requestParameters.opportunity === undefined) {
      throw new runtime.RequiredError(
        'opportunity',
        'Required parameter requestParameters.opportunity was null or undefined when calling opportunitiesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OpportunityToJSON(requestParameters.opportunity)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateOpportunityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create opportunity
   * Create opportunity
   */
  async opportunitiesAdd(
    requestParameters: CrmApiOpportunitiesAddRequest
  ): Promise<CreateOpportunityResponse> {
    const response = await this.opportunitiesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List opportunities
   * List opportunities
   */
  async opportunitiesAllRaw(
    requestParameters: CrmApiOpportunitiesAllRequest
  ): Promise<runtime.ApiResponse<GetOpportunitiesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetOpportunitiesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List opportunities
   * List opportunities
   */
  async opportunitiesAll(
    requestParameters: CrmApiOpportunitiesAllRequest
  ): Promise<GetOpportunitiesResponse> {
    const response = await this.opportunitiesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete opportunity
   * Delete opportunity
   */
  async opportunitiesDeleteRaw(
    requestParameters: CrmApiOpportunitiesDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteOpportunityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling opportunitiesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeleteOpportunityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete opportunity
   * Delete opportunity
   */
  async opportunitiesDelete(
    requestParameters: CrmApiOpportunitiesDeleteRequest
  ): Promise<DeleteOpportunityResponse> {
    const response = await this.opportunitiesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get opportunity
   * Get opportunity
   */
  async opportunitiesOneRaw(
    requestParameters: CrmApiOpportunitiesOneRequest
  ): Promise<runtime.ApiResponse<GetOpportunityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling opportunitiesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetOpportunityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get opportunity
   * Get opportunity
   */
  async opportunitiesOne(
    requestParameters: CrmApiOpportunitiesOneRequest
  ): Promise<GetOpportunityResponse> {
    const response = await this.opportunitiesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update opportunity
   * Update opportunity
   */
  async opportunitiesUpdateRaw(
    requestParameters: CrmApiOpportunitiesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateOpportunityResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling opportunitiesUpdate.'
      )
    }

    if (requestParameters.opportunity === null || requestParameters.opportunity === undefined) {
      throw new runtime.RequiredError(
        'opportunity',
        'Required parameter requestParameters.opportunity was null or undefined when calling opportunitiesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: OpportunityToJSON(requestParameters.opportunity)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdateOpportunityResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update opportunity
   * Update opportunity
   */
  async opportunitiesUpdate(
    requestParameters: CrmApiOpportunitiesUpdateRequest
  ): Promise<UpdateOpportunityResponse> {
    const response = await this.opportunitiesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create pipeline
   * Create pipeline
   */
  async pipelinesAddRaw(
    requestParameters: CrmApiPipelinesAddRequest
  ): Promise<runtime.ApiResponse<CreatePipelineResponse>> {
    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
      throw new runtime.RequiredError(
        'pipeline',
        'Required parameter requestParameters.pipeline was null or undefined when calling pipelinesAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: PipelineToJSON(requestParameters.pipeline)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreatePipelineResponseFromJSON(jsonValue)
    )
  }

  /**
   * Create pipeline
   * Create pipeline
   */
  async pipelinesAdd(
    requestParameters: CrmApiPipelinesAddRequest
  ): Promise<CreatePipelineResponse> {
    const response = await this.pipelinesAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List pipelines
   * List pipelines
   */
  async pipelinesAllRaw(
    requestParameters: CrmApiPipelinesAllRequest
  ): Promise<runtime.ApiResponse<GetPipelinesResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetPipelinesResponseFromJSON(jsonValue)
    )
  }

  /**
   * List pipelines
   * List pipelines
   */
  async pipelinesAll(requestParameters: CrmApiPipelinesAllRequest): Promise<GetPipelinesResponse> {
    const response = await this.pipelinesAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete pipeline
   * Delete pipeline
   */
  async pipelinesDeleteRaw(
    requestParameters: CrmApiPipelinesDeleteRequest
  ): Promise<runtime.ApiResponse<DeletePipelineResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling pipelinesDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      DeletePipelineResponseFromJSON(jsonValue)
    )
  }

  /**
   * Delete pipeline
   * Delete pipeline
   */
  async pipelinesDelete(
    requestParameters: CrmApiPipelinesDeleteRequest
  ): Promise<DeletePipelineResponse> {
    const response = await this.pipelinesDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get pipeline
   * Get pipeline
   */
  async pipelinesOneRaw(
    requestParameters: CrmApiPipelinesOneRequest
  ): Promise<runtime.ApiResponse<GetPipelineResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling pipelinesOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      GetPipelineResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get pipeline
   * Get pipeline
   */
  async pipelinesOne(requestParameters: CrmApiPipelinesOneRequest): Promise<GetPipelineResponse> {
    const response = await this.pipelinesOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update pipeline
   * Update pipeline
   */
  async pipelinesUpdateRaw(
    requestParameters: CrmApiPipelinesUpdateRequest
  ): Promise<runtime.ApiResponse<UpdatePipelineResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling pipelinesUpdate.'
      )
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
      throw new runtime.RequiredError(
        'pipeline',
        'Required parameter requestParameters.pipeline was null or undefined when calling pipelinesUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: PipelineToJSON(requestParameters.pipeline)
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      UpdatePipelineResponseFromJSON(jsonValue)
    )
  }

  /**
   * Update pipeline
   * Update pipeline
   */
  async pipelinesUpdate(
    requestParameters: CrmApiPipelinesUpdateRequest
  ): Promise<UpdatePipelineResponse> {
    const response = await this.pipelinesUpdateRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create user
   * Create user
   */
  async usersAddRaw(
    requestParameters: CrmApiUsersAddRequest
  ): Promise<runtime.ApiResponse<CreateUserResponse>> {
    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling usersAdd.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserToJSON(requestParameters.user)
    })

    return new runtime.JSONApiResponse(response, jsonValue => CreateUserResponseFromJSON(jsonValue))
  }

  /**
   * Create user
   * Create user
   */
  async usersAdd(requestParameters: CrmApiUsersAddRequest): Promise<CreateUserResponse> {
    const response = await this.usersAddRaw(requestParameters)
    return await response.value()
  }

  /**
   * List users
   * List users
   */
  async usersAllRaw(
    requestParameters: CrmApiUsersAllRequest
  ): Promise<runtime.ApiResponse<GetUsersResponse>> {
    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetUsersResponseFromJSON(jsonValue))
  }

  /**
   * List users
   * List users
   */
  async usersAll(requestParameters: CrmApiUsersAllRequest): Promise<GetUsersResponse> {
    const response = await this.usersAllRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete user
   * Delete user
   */
  async usersDeleteRaw(
    requestParameters: CrmApiUsersDeleteRequest
  ): Promise<runtime.ApiResponse<DeleteUserResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling usersDelete.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => DeleteUserResponseFromJSON(jsonValue))
  }

  /**
   * Delete user
   * Delete user
   */
  async usersDelete(requestParameters: CrmApiUsersDeleteRequest): Promise<DeleteUserResponse> {
    const response = await this.usersDeleteRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get user
   * Get user
   */
  async usersOneRaw(
    requestParameters: CrmApiUsersOneRequest
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling usersOne.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })

    return new runtime.JSONApiResponse(response, jsonValue => GetUserResponseFromJSON(jsonValue))
  }

  /**
   * Get user
   * Get user
   */
  async usersOne(requestParameters: CrmApiUsersOneRequest): Promise<GetUserResponse> {
    const response = await this.usersOneRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update user
   * Update user
   */
  async usersUpdateRaw(
    requestParameters: CrmApiUsersUpdateRequest
  ): Promise<runtime.ApiResponse<UpdateUserResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling usersUpdate.'
      )
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling usersUpdate.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId)
    }

    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId)
    }

    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization') // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UserToJSON(requestParameters.user)
    })

    return new runtime.JSONApiResponse(response, jsonValue => UpdateUserResponseFromJSON(jsonValue))
  }

  /**
   * Update user
   * Update user
   */
  async usersUpdate(requestParameters: CrmApiUsersUpdateRequest): Promise<UpdateUserResponse> {
    const response = await this.usersUpdateRaw(requestParameters)
    return await response.value()
  }
}
