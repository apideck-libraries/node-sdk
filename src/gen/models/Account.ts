/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Override template imports only to fix circulr dependencies generated by default template
// https://github.com/OpenAPITools/openapi-generator/issues/6140

import { exists } from '../runtime'
import {
  AccountParentAccount,
  AccountParentAccountFromJSON,
  AccountParentAccountToJSON
} from './AccountParentAccount'
import { BankAccount, BankAccountFromJSON, BankAccountToJSON } from './BankAccount'
import { Currency, CurrencyFromJSON, CurrencyToJSON } from './Currency'

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
  /**
   *
   * @type {string}
   * @memberof Account
   */
  readonly id?: string
  /**
   *
   * @type {string}
   * @memberof Account
   */
  readonly display_id?: string
  /**
   *
   * @type {string}
   * @memberof Account
   */
  nominal_code?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  classification?: AccountClassification
  /**
   *
   * @type {string}
   * @memberof Account
   */
  type?: AccountType
  /**
   *
   * @type {string}
   * @memberof Account
   */
  sub_type?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  fully_qualified_name?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  description?: string | null
  /**
   * The opening balance. A positive integer representing the smallest currency unit (e.g., 100 cents equals $1.00 or 100 equals ¥100, a zero-decimal currency)
   * @type {number}
   * @memberof Account
   */
  opening_balance?: number | null
  /**
   * The current balance. A positive integer representing the smallest currency unit (e.g., 20000 cents equals $200.00 or 20000 equals ¥20000, a zero-decimal currency)
   * @type {number}
   * @memberof Account
   */
  current_balance?: number | null
  /**
   *
   * @type {Currency}
   * @memberof Account
   */
  currency?: Currency | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  tax_type?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  tax_code?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  level?: string | null
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  active?: boolean | null
  /**
   *
   * @type {BankAccount}
   * @memberof Account
   */
  bank_account?: BankAccount
  /**
   *
   * @type {AccountParentAccount}
   * @memberof Account
   */
  parent_account?: AccountParentAccount
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  sub_account?: boolean | null
  /**
   *
   * @type {Array<object>}
   * @memberof Account
   */
  sub_accounts?: Array<object>
  /**
   * Reconciliation Date means the last calendar day of each Reconciliation Period.
   * @type {Date}
   * @memberof Account
   */
  readonly last_reconciliation_date?: Date
  /**
   *
   * @type {string}
   * @memberof Account
   */
  readonly updated_by?: string | null
  /**
   *
   * @type {string}
   * @memberof Account
   */
  readonly created_by?: string | null
  /**
   *
   * @type {Date}
   * @memberof Account
   */
  readonly updated_at?: Date
  /**
   *
   * @type {Date}
   * @memberof Account
   */
  readonly created_at?: Date
}

/**
 * @export
 * @enum {string}
 */
export enum AccountClassification {
  asset = 'asset',
  equity = 'equity',
  expense = 'expense',
  liability = 'liability',
  revenue = 'revenue',
  income = 'income',
  other_income = 'other_income',
  other_expense = 'other_expense',
  costs_of_sales = 'costs_of_sales'
}
/**
 * @export
 * @enum {string}
 */
export enum AccountType {
  accounts_receivable = 'accounts_receivable',
  bank = 'bank',
  current_asset = 'current_asset',
  non_current_asset = 'non_current_asset',
  other_asset = 'other_asset',
  equity = 'equity',
  expense = 'expense',
  other_expense = 'other_expense',
  costs_of_sales = 'costs_of_sales',
  accounts_payable = 'accounts_payable',
  credit_card = 'credit_card',
  current_liability = 'current_liability',
  non_current_liability = 'non_current_liability',
  other_liability = 'other_liability'
}

export function AccountFromJSON(json: any): Account {
  return AccountFromJSONTyped(json, false)
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    nominal_code: !exists(json, 'nominal_code') ? undefined : json['nominal_code'],
    classification: !exists(json, 'classification') ? undefined : json['classification'],
    type: !exists(json, 'type') ? undefined : json['type'],
    sub_type: !exists(json, 'sub_type') ? undefined : json['sub_type'],
    name: !exists(json, 'name') ? undefined : json['name'],
    fully_qualified_name: !exists(json, 'fully_qualified_name')
      ? undefined
      : json['fully_qualified_name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    opening_balance: !exists(json, 'opening_balance') ? undefined : json['opening_balance'],
    current_balance: !exists(json, 'current_balance') ? undefined : json['current_balance'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    tax_type: !exists(json, 'tax_type') ? undefined : json['tax_type'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    level: !exists(json, 'level') ? undefined : json['level'],
    active: !exists(json, 'active') ? undefined : json['active'],
    bank_account: !exists(json, 'bank_account')
      ? undefined
      : BankAccountFromJSON(json['bank_account']),
    parent_account: !exists(json, 'parent_account')
      ? undefined
      : AccountParentAccountFromJSON(json['parent_account']),
    sub_account: !exists(json, 'sub_account') ? undefined : json['sub_account'],
    sub_accounts: !exists(json, 'sub_accounts') ? undefined : json['sub_accounts'],
    last_reconciliation_date: !exists(json, 'last_reconciliation_date')
      ? undefined
      : new Date(json['last_reconciliation_date']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : new Date(json['created_at'])
  }
}

export function AccountToJSON(value?: Account | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    nominal_code: value.nominal_code,
    classification: value.classification,
    type: value.type,
    sub_type: value.sub_type,
    name: value.name,
    fully_qualified_name: value.fully_qualified_name,
    description: value.description,
    opening_balance: value.opening_balance,
    current_balance: value.current_balance,
    currency: CurrencyToJSON(value.currency),
    tax_type: value.tax_type,
    tax_code: value.tax_code,
    level: value.level,
    active: value.active,
    bank_account: BankAccountToJSON(value.bank_account),
    parent_account: AccountParentAccountToJSON(value.parent_account),
    sub_account: value.sub_account,
    sub_accounts: value.sub_accounts
  }
}
