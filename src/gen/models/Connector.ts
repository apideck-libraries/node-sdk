/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime'
import {
  ConnectorSetting,
  ConnectorSettingFromJSON,
  ConnectorSettingToJSON
} from './ConnectorSetting'
import {
  ConnectorSupportedEvents,
  ConnectorSupportedEventsFromJSON,
  ConnectorSupportedEventsToJSON
} from './ConnectorSupportedEvents'
import {
  ConnectorSupportedResources,
  ConnectorSupportedResourcesFromJSON,
  ConnectorSupportedResourcesToJSON
} from './ConnectorSupportedResources'
import {
  ConnectorUnifiedApis,
  ConnectorUnifiedApisFromJSON,
  ConnectorUnifiedApisToJSON
} from './ConnectorUnifiedApis'

/**
 *
 * @export
 * @interface Connector
 */
export interface Connector {
  /**
   * ID of the connector.
   * @type {string}
   * @memberof Connector
   */
  readonly id?: string
  /**
   * Name of the connector.
   * @type {string}
   * @memberof Connector
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof Connector
   */
  description?: string | null
  /**
   * Link to a small square icon for the connector.
   * @type {string}
   * @memberof Connector
   */
  icon_url?: string
  /**
   * Link to the full logo for the connector.
   * @type {string}
   * @memberof Connector
   */
  logo_url?: string
  /**
   * Link to the connector's website.
   * @type {string}
   * @memberof Connector
   */
  website_url?: string
  /**
   * Type of authorization used by the connector
   * @type {string}
   * @memberof Connector
   */
  auth_type?: ConnectorAuthType
  /**
   * Status of the connector. Connectors with status live or beta are callable.
   * @type {string}
   * @memberof Connector
   */
  status?: ConnectorStatus
  /**
   *
   * @type {Array<ConnectorSetting>}
   * @memberof Connector
   */
  settings?: Array<ConnectorSetting>
  /**
   * Service provider identifier
   * @type {string}
   * @memberof Connector
   */
  service_id?: string
  /**
   * List of Unified APIs that feature this connector.
   * @type {Array<ConnectorUnifiedApis>}
   * @memberof Connector
   */
  unified_apis?: Array<ConnectorUnifiedApis>
  /**
   * List of resources that are supported on the connector.
   * @type {Array<ConnectorSupportedResources>}
   * @memberof Connector
   */
  supported_resources?: Array<ConnectorSupportedResources>
  /**
   * List of resources that have settings that can be configured.
   * @type {Array<string>}
   * @memberof Connector
   */
  configurable_resources?: Array<string>
  /**
   * List of resources that are supported on the connector.
   * @type {Array<ConnectorSupportedEvents>}
   * @memberof Connector
   */
  supported_events?: Array<ConnectorSupportedEvents>
}

/**
 * @export
 * @enum {string}
 */
export enum ConnectorAuthType {
  oauth2 = 'oauth2',
  apiKey = 'apiKey',
  basic = 'basic',
  none = 'none'
}
/**
 * @export
 * @enum {string}
 */
export enum ConnectorStatus {
  live = 'live',
  beta = 'beta',
  development = 'development',
  considering = 'considering'
}

export function ConnectorFromJSON(json: any): Connector {
  return ConnectorFromJSONTyped(json, false)
}

export function ConnectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connector {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    icon_url: !exists(json, 'icon_url') ? undefined : json['icon_url'],
    logo_url: !exists(json, 'logo_url') ? undefined : json['logo_url'],
    website_url: !exists(json, 'website_url') ? undefined : json['website_url'],
    auth_type: !exists(json, 'auth_type') ? undefined : json['auth_type'],
    status: !exists(json, 'status') ? undefined : json['status'],
    settings: !exists(json, 'settings')
      ? undefined
      : (json['settings'] as Array<any>).map(ConnectorSettingFromJSON),
    service_id: !exists(json, 'service_id') ? undefined : json['service_id'],
    unified_apis: !exists(json, 'unified_apis')
      ? undefined
      : (json['unified_apis'] as Array<any>).map(ConnectorUnifiedApisFromJSON),
    supported_resources: !exists(json, 'supported_resources')
      ? undefined
      : (json['supported_resources'] as Array<any>).map(ConnectorSupportedResourcesFromJSON),
    configurable_resources: !exists(json, 'configurable_resources')
      ? undefined
      : json['configurable_resources'],
    supported_events: !exists(json, 'supported_events')
      ? undefined
      : (json['supported_events'] as Array<any>).map(ConnectorSupportedEventsFromJSON)
  }
}

export function ConnectorToJSON(value?: Connector | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    name: value.name,
    description: value.description,
    icon_url: value.icon_url,
    logo_url: value.logo_url,
    website_url: value.website_url,
    auth_type: value.auth_type,
    status: value.status,
    settings:
      value.settings === undefined
        ? undefined
        : (value.settings as Array<any>).map(ConnectorSettingToJSON),
    service_id: value.service_id,
    unified_apis:
      value.unified_apis === undefined
        ? undefined
        : (value.unified_apis as Array<any>).map(ConnectorUnifiedApisToJSON),
    supported_resources:
      value.supported_resources === undefined
        ? undefined
        : (value.supported_resources as Array<any>).map(ConnectorSupportedResourcesToJSON),
    configurable_resources: value.configurable_resources,
    supported_events:
      value.supported_events === undefined
        ? undefined
        : (value.supported_events as Array<any>).map(ConnectorSupportedEventsToJSON)
  }
}
