/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Override template imports only to fix circulr dependencies generated by default template
// https://github.com/OpenAPITools/openapi-generator/issues/6140

import { exists } from '../runtime'
import { AuthType, AuthTypeFromJSON, AuthTypeToJSON } from './AuthType'

/**
 *
 * @export
 * @interface ConsumerConnections
 */
export interface ConsumerConnections {
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  readonly id?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  icon?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  logo?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  serviceId?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  unifiedApi?: string
  /**
   *
   * @type {AuthType}
   * @memberof ConsumerConnections
   */
  authType?: AuthType
  /**
   *
   * @type {boolean}
   * @memberof ConsumerConnections
   */
  enabled?: boolean
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  updatedAt?: string | null
  /**
   *
   * @type {string}
   * @memberof ConsumerConnections
   */
  state?: ConsumerConnectionsState
}

/**
 * @export
 * @enum {string}
 */
export enum ConsumerConnectionsState {
  available = 'available',
  callable = 'callable',
  added = 'added',
  configured = 'configured',
  authorized = 'authorized'
}

export function ConsumerConnectionsFromJSON(json: any): ConsumerConnections {
  return ConsumerConnectionsFromJSONTyped(json, false)
}

export function ConsumerConnectionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ConsumerConnections {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    icon: !exists(json, 'icon') ? undefined : json['icon'],
    logo: !exists(json, 'logo') ? undefined : json['logo'],
    serviceId: !exists(json, 'service_id') ? undefined : json['service_id'],
    unifiedApi: !exists(json, 'unified_api') ? undefined : json['unified_api'],
    authType: !exists(json, 'auth_type') ? undefined : AuthTypeFromJSON(json['auth_type']),
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    createdAt: !exists(json, 'created_at') ? undefined : json['created_at'],
    updatedAt: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    state: !exists(json, 'state') ? undefined : json['state']
  }
}

export function ConsumerConnectionsToJSON(value?: ConsumerConnections | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    name: value.name,
    icon: value.icon,
    logo: value.logo,
    service_id: value.serviceId,
    unified_api: value.unifiedApi,
    auth_type: AuthTypeToJSON(value.authType),
    enabled: value.enabled,
    created_at: value.createdAt,
    updated_at: value.updatedAt,
    state: value.state
  }
}
