/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Override template imports only to fix circulr dependencies generated by default template
// https://github.com/OpenAPITools/openapi-generator/issues/6140

import { exists } from '../runtime'
import { Address, AddressFromJSON, AddressToJSON } from './Address'
import { BankAccount, BankAccountFromJSON, BankAccountToJSON } from './BankAccount'
import { CustomField, CustomFieldFromJSON, CustomFieldToJSON } from './CustomField'
import { Email, EmailFromJSON, EmailToJSON } from './Email'
import { PhoneNumber, PhoneNumberFromJSON, PhoneNumberToJSON } from './PhoneNumber'
import { SocialLink, SocialLinkFromJSON, SocialLinkToJSON } from './SocialLink'
import { Tags, TagsFromJSON, TagsToJSON } from './Tags'
import { Website, WebsiteFromJSON, WebsiteToJSON } from './Website'

/**
 *
 * @export
 * @interface Company
 */
export interface Company {
  /**
   *
   * @type {string}
   * @memberof Company
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Company
   */
  readonly id?: string
  /**
   *
   * @type {number}
   * @memberof Company
   */
  readonly interactionCount?: number | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  ownerId?: string
  /**
   *
   * @type {string}
   * @memberof Company
   */
  image?: string | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  description?: string | null
  /**
   * VAT number
   * @type {string}
   * @memberof Company
   */
  vatNumber?: string | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  currency?: string | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  status?: string | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  fax?: string | null
  /**
   * Annual Revenue
   * @type {string}
   * @memberof Company
   */
  annualRevenue?: string | null
  /**
   * Number of employees
   * @type {string}
   * @memberof Company
   */
  numberOfEmployees?: string | null
  /**
   * Industry
   * @type {string}
   * @memberof Company
   */
  industry?: string | null
  /**
   * Ownership
   * @type {string}
   * @memberof Company
   */
  ownership?: string | null
  /**
   * Parent ID
   * @type {string}
   * @memberof Company
   */
  readonly parentId?: string
  /**
   *
   * @type {Array<BankAccount>}
   * @memberof Company
   */
  bankAccounts?: Array<BankAccount>
  /**
   *
   * @type {Array<Website>}
   * @memberof Company
   */
  websites?: Array<Website>
  /**
   *
   * @type {Array<Address>}
   * @memberof Company
   */
  addresses?: Array<Address>
  /**
   *
   * @type {Array<SocialLink>}
   * @memberof Company
   */
  socialLinks?: Array<SocialLink>
  /**
   *
   * @type {Array<PhoneNumber>}
   * @memberof Company
   */
  phoneNumbers?: Array<PhoneNumber>
  /**
   *
   * @type {Array<Email>}
   * @memberof Company
   */
  emails?: Array<Email>
  /**
   *
   * @type {Array<CustomField>}
   * @memberof Company
   */
  customFields?: Array<CustomField>
  /**
   *
   * @type {Tags}
   * @memberof Company
   */
  tags?: Tags
  /**
   *
   * @type {Date}
   * @memberof Company
   */
  readonly lastActivityAt?: Date | null
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  readonly deleted?: boolean
  /**
   *
   * @type {string}
   * @memberof Company
   */
  readonly updatedBy?: string | null
  /**
   *
   * @type {string}
   * @memberof Company
   */
  readonly createdBy?: string | null
  /**
   *
   * @type {Date}
   * @memberof Company
   */
  readonly updatedAt?: Date
  /**
   *
   * @type {Date}
   * @memberof Company
   */
  readonly createdAt?: Date
}

export function CompanyFromJSON(json: any): Company {
  return CompanyFromJSONTyped(json, false)
}

export function CompanyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Company {
  if (json === undefined || json === null) {
    return json
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    interactionCount: !exists(json, 'interaction_count') ? undefined : json['interaction_count'],
    ownerId: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    image: !exists(json, 'image') ? undefined : json['image'],
    description: !exists(json, 'description') ? undefined : json['description'],
    vatNumber: !exists(json, 'vat_number') ? undefined : json['vat_number'],
    currency: !exists(json, 'currency') ? undefined : json['currency'],
    status: !exists(json, 'status') ? undefined : json['status'],
    fax: !exists(json, 'fax') ? undefined : json['fax'],
    annualRevenue: !exists(json, 'annual_revenue') ? undefined : json['annual_revenue'],
    numberOfEmployees: !exists(json, 'number_of_employees')
      ? undefined
      : json['number_of_employees'],
    industry: !exists(json, 'industry') ? undefined : json['industry'],
    ownership: !exists(json, 'ownership') ? undefined : json['ownership'],
    parentId: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    bankAccounts: !exists(json, 'bank_accounts')
      ? undefined
      : (json['bank_accounts'] as Array<any>).map(BankAccountFromJSON),
    websites: !exists(json, 'websites')
      ? undefined
      : (json['websites'] as Array<any>).map(WebsiteFromJSON),
    addresses: !exists(json, 'addresses')
      ? undefined
      : (json['addresses'] as Array<any>).map(AddressFromJSON),
    socialLinks: !exists(json, 'social_links')
      ? undefined
      : (json['social_links'] as Array<any>).map(SocialLinkFromJSON),
    phoneNumbers: !exists(json, 'phone_numbers')
      ? undefined
      : (json['phone_numbers'] as Array<any>).map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : (json['emails'] as Array<any>).map(EmailFromJSON),
    customFields: !exists(json, 'custom_fields')
      ? undefined
      : (json['custom_fields'] as Array<any>).map(CustomFieldFromJSON),
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    lastActivityAt: !exists(json, 'last_activity_at')
      ? undefined
      : json['last_activity_at'] === null
      ? null
      : new Date(json['last_activity_at']),
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    updatedBy: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    createdBy: !exists(json, 'created_by') ? undefined : json['created_by'],
    updatedAt: !exists(json, 'updated_at') ? undefined : new Date(json['updated_at']),
    createdAt: !exists(json, 'created_at') ? undefined : new Date(json['created_at'])
  }
}

export function CompanyToJSON(value?: Company | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    name: value.name,
    owner_id: value.ownerId,
    image: value.image,
    description: value.description,
    vat_number: value.vatNumber,
    currency: value.currency,
    status: value.status,
    fax: value.fax,
    annual_revenue: value.annualRevenue,
    number_of_employees: value.numberOfEmployees,
    industry: value.industry,
    ownership: value.ownership,
    bank_accounts:
      value.bankAccounts === undefined
        ? undefined
        : (value.bankAccounts as Array<any>).map(BankAccountToJSON),
    websites:
      value.websites === undefined ? undefined : (value.websites as Array<any>).map(WebsiteToJSON),
    addresses:
      value.addresses === undefined
        ? undefined
        : (value.addresses as Array<any>).map(AddressToJSON),
    social_links:
      value.socialLinks === undefined
        ? undefined
        : (value.socialLinks as Array<any>).map(SocialLinkToJSON),
    phone_numbers:
      value.phoneNumbers === undefined
        ? undefined
        : (value.phoneNumbers as Array<any>).map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : (value.emails as Array<any>).map(EmailToJSON),
    custom_fields:
      value.customFields === undefined
        ? undefined
        : (value.customFields as Array<any>).map(CustomFieldToJSON),
    tags: TagsToJSON(value.tags)
  }
}
