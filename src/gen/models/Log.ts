/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Override template imports only to fix circulr dependencies generated by default template
// https://github.com/OpenAPITools/openapi-generator/issues/6140

import { exists } from '../runtime'
import { LogOperation, LogOperationFromJSON, LogOperationToJSON } from './LogOperation'
import { LogService, LogServiceFromJSON, LogServiceToJSON } from './LogService'

/**
 *
 * @export
 * @interface Log
 */
export interface Log {
  /**
   * Indicates if the request was made via REST or Graphql endpoint.
   * @type {string}
   * @memberof Log
   */
  apiStyle: string
  /**
   * The Apideck base URL the request was made to.
   * @type {string}
   * @memberof Log
   */
  baseUrl: string
  /**
   * Indicates whether or not this is a child or parent request.
   * @type {boolean}
   * @memberof Log
   */
  childRequest: boolean
  /**
   * The consumer Id associated with the request.
   * @type {string}
   * @memberof Log
   */
  consumerId: string
  /**
   * The entire execution time in milliseconds it took to call the Apideck service provider.
   * @type {number}
   * @memberof Log
   */
  duration: number
  /**
   * The entire execution time in milliseconds it took to make the request.
   * @type {number}
   * @memberof Log
   */
  execution: number
  /**
   * When request is a parent request, this indicates if there are child requests associated.
   * @type {boolean}
   * @memberof Log
   */
  hasChildren: boolean
  /**
   * HTTP Method of request.
   * @type {string}
   * @memberof Log
   */
  httpMethod: string
  /**
   * UUID acting as Request Identifier.
   * @type {string}
   * @memberof Log
   */
  id: string
  /**
   * Latency added by making this request via Unified Api.
   * @type {number}
   * @memberof Log
   */
  latency: number
  /**
   *
   * @type {LogOperation}
   * @memberof Log
   */
  operation: LogOperation
  /**
   * When request is a child request, this UUID indicates it's parent request.
   * @type {string}
   * @memberof Log
   */
  parentId: string | null
  /**
   * The path component of the URI the request was made to.
   * @type {string}
   * @memberof Log
   */
  path: string
  /**
   * Indicates whether the request was made using Apidecks sandbox credentials or not.
   * @type {boolean}
   * @memberof Log
   */
  sandbox: boolean
  /**
   *
   * @type {LogService}
   * @memberof Log
   */
  service: LogService
  /**
   * HTTP Status code that was returned.
   * @type {number}
   * @memberof Log
   */
  statusCode: number
  /**
   * Whether or not the request was successful.
   * @type {boolean}
   * @memberof Log
   */
  success: boolean
  /**
   * ISO Date and time when the request was made.
   * @type {string}
   * @memberof Log
   */
  timestamp: string
  /**
   * Which Unified Api request was made to.
   * @type {string}
   * @memberof Log
   */
  unifiedApi: LogUnifiedApi
  /**
   * If error occured, this is brief explanation
   * @type {string}
   * @memberof Log
   */
  errorMessage?: string | null
  /**
   * The IP address of the source of the request.
   * @type {string}
   * @memberof Log
   */
  sourceIp?: string | null
}

/**
 * @export
 * @enum {string}
 */
export enum LogUnifiedApi {
  crm = 'crm',
  lead = 'lead',
  proxy = 'proxy',
  vault = 'vault'
}

export function LogFromJSON(json: any): Log {
  return LogFromJSONTyped(json, false)
}

export function LogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Log {
  if (json === undefined || json === null) {
    return json
  }
  return {
    apiStyle: json['api_style'],
    baseUrl: json['base_url'],
    childRequest: json['child_request'],
    consumerId: json['consumer_id'],
    duration: json['duration'],
    execution: json['execution'],
    hasChildren: json['has_children'],
    httpMethod: json['http_method'],
    id: json['id'],
    latency: json['latency'],
    operation: LogOperationFromJSON(json['operation']),
    parentId: json['parent_id'],
    path: json['path'],
    sandbox: json['sandbox'],
    service: LogServiceFromJSON(json['service']),
    statusCode: json['status_code'],
    success: json['success'],
    timestamp: json['timestamp'],
    unifiedApi: json['unified_api'],
    errorMessage: !exists(json, 'error_message') ? undefined : json['error_message'],
    sourceIp: !exists(json, 'source_ip') ? undefined : json['source_ip']
  }
}

export function LogToJSON(value?: Log | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    api_style: value.apiStyle,
    base_url: value.baseUrl,
    child_request: value.childRequest,
    consumer_id: value.consumerId,
    duration: value.duration,
    execution: value.execution,
    has_children: value.hasChildren,
    http_method: value.httpMethod,
    id: value.id,
    latency: value.latency,
    operation: LogOperationToJSON(value.operation),
    parent_id: value.parentId,
    path: value.path,
    sandbox: value.sandbox,
    service: LogServiceToJSON(value.service),
    status_code: value.statusCode,
    success: value.success,
    timestamp: value.timestamp,
    unified_api: value.unifiedApi,
    error_message: value.errorMessage,
    source_ip: value.sourceIp
  }
}
